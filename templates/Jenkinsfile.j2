openshift.withCluster() {
  env.POM_FILE = env.BUILD_CONTEXT_DIR ? "${env.BUILD_CONTEXT_DIR}/pom.xml" : "pom.xml"
}

pipeline {
 agent {
  label 'maven'
 }   
   
 stages {
  stage('Git Checkout') {
   steps {
    git url: "https://github.com/wkulhanek/openshift-tasks.git"
   }
  }
   
  stage('Build'){
   steps {
    sh "mvn clean install -DskipTests=true -f ${POM_FILE}"
   }
  }
 
  stage('Unit Test'){
   steps {
    sh "mvn test -f ${POM_FILE}"
   }
  }
 
  stage('Create Image Builder') {
   when {
    expression {
     openshift.withCluster() {
      openshift.withProject("cicd-dev") {
       return !openshift.selector("bc", "tasks").exists();
      }
     }
    }
   }
   steps {
    script {
     openshift.withCluster() {
      openshift.withProject("cicd-dev") {
       openshift.newBuild("--name=tasks", "--image-stream=jboss-eap70-openshift:1.5", "--binary=true")
      }
     }
    }
   }
  }

  stage('Build Container Image'){
   steps {
    sh "rm -rf oc-build && mkdir -p oc-build/deployments && mkdir -p oc-build/configuration"
    sh "cp target/openshift-tasks.war oc-build/deployments/ROOT.war"
    sh "cp configuration/*.properties oc-build/configuration"
    script {
     openshift.withCluster() {
      openshift.withProject("cicd-dev") {
       openshift.selector("bc", "tasks").startBuild("--from-dir=oc-build").logs("-f")
      }
     }
    }
   }
  }

  stage('Create app on tasks-dev') {
   when {
    expression {
     openshift.withCluster() {
      openshift.withProject("tasks-dev") {
       return !openshift.selector('dc', 'tasks').exists()
      }
     }
    }
   }
   steps {
    script {
     openshift.withCluster() {
      openshift.withProject("tasks-dev") {
       def tasksApp = openshift.newApp("tasks-dev/tasks:latest --name=tasks")
       openshift.set("triggers", "dc/tasks", "--manual")      
       tasksApp.narrow("svc").expose()
       openshift.set("probe dc/tasks --readiness --get-url=http://:8080/ws/demo/healthcheck --initial-delay-seconds=10 --failure-threshold=10 --period-seconds=10")
       openshift.set("probe dc/tasks --liveness --get-url=http://:8080/ws/demo/healthcheck --initial-delay-seconds=10 --failure-threshold=10 --period-seconds=10")
       def dc = openshift.selector("dc", "tasks")
       while (dc.object().spec.replicas != dc.object().status.availableReplicas) {
         sleep 5
       }
      }
     }
    }
   }
  }

  stage('Deploy to  tasks-dev') {
   steps {
    script {
     openshift.withCluster() {
      openshift.withProject("tasks-dev") {
       openshift.selector("dc", "tasks").rollout().latest();
      }    
     }
    }
   }
  }
  

  stage ('Check on tasks-dev') {
   steps {
    script {
     openshift.withCluster() {
      openshift.withProject("tasks-dev") {
       def dcObj = openshift.selector('dc', "tasks").object()
       def podSelector = openshift.selector('pod', [deployment: "tasks-${dcObj.status.latestVersion}"])
       podSelector.untilEach {
        return it.object().status.containerStatuses[0].ready
       }
      }
     }
    }
   }
  }

  stage('Promote from tasks-dev to tasks-test') {
   steps {
    script {
     openshift.withCluster() {
      openshift.tag("tasks-dev/tasks:latest", "tasks-test/tasks:latest")
     }
    }
   }
  }
  
  stage('Create app on tasks-test') {
   when {
    expression {
     openshift.withCluster() {
      openshift.withProject("tasks-test") {
       return !openshift.selector('dc', 'tasks').exists()
      }
     }
    }
   }
   steps {
    script {
     openshift.withCluster() {
      openshift.withProject("tasks-test") {
       def tasksApp = openshift.newApp("tasks-test/tasks:latest --name=tasks")
       openshift.set("triggers", "dc/tasks", "--manual")
       tasksApp.narrow("svc").expose()
       openshift.set("probe dc/tasks --readiness --get-url=http://:8080/ws/demo/healthcheck --initial-delay-seconds=10 --failure-threshold=10 --period-seconds=10")
       openshift.set("probe dc/tasks --liveness --get-url=http://:8080/ws/demo/healthcheck --initial-delay-seconds=10 --failure-threshold=10 --period-seconds=10")
       def dc = openshift.selector("dc", "tasks")
       while (dc.object().spec.replicas != dc.object().status.availableReplicas) {
         sleep 5
       }
      }
     }
    }
   }
  }

  stage('Deploy to  tasks-test') {
   steps {
    script {
     openshift.withCluster() {
      openshift.withProject("tasks-test") {
       openshift.selector("dc", "tasks").rollout().latest();
      }
     }
    }
   }
  }

  stage ('Check on tasks-test') {
   steps {
    script {
     openshift.withCluster() {
      openshift.withProject("tasks-test") {
       def dcObj = openshift.selector('dc', "tasks").object()
       def podSelector = openshift.selector('pod', [deployment: "tasks-${dcObj.status.latestVersion}"])
       podSelector.untilEach {
        return it.object().status.containerStatuses[0].ready
       }
      }
     }
    }
   }
  }

  stage('Promote from Test to Prod') {
   steps {
    script {
     openshift.withCluster() {
      openshift.tag("tasks-test/tasks:latest", "tasks-prod/tasks:latest")
     }
    }
   }
  }
    
  stage('Create app on tasks-prod') {
   when {
    expression {
     openshift.withCluster() {
      openshift.withProject("tasks-prod") {
       return !openshift.selector('dc', 'tasks').exists()
      }
     }
    }
   }
   steps {
    script {
     openshift.withCluster() {
      openshift.withProject("tasks-prod") {
       def tasksApp = openshift.newApp("tasks-prod/tasks:latest --name=tasks")
       openshift.set("triggers", "dc/tasks", "--manual")      
       tasksApp.narrow("svc").expose()
       openshift.set("probe dc/tasks --readiness --get-url=http://:8080/ws/demo/healthcheck --initial-delay-seconds=10 --failure-threshold=10 --period-seconds=10")
       openshift.set("probe dc/tasks --liveness --get-url=http://:8080/ws/demo/healthcheck --initial-delay-seconds=10 --failure-threshold=10 --period-seconds=10")
       openshift.set("resources dc tasks --limits=cpu=250m,memory=512Mi --requests=cpu=100m,memory=256Mi")
       openshift.selector("dc", "tasks").autoscale("--min 1 --max 10 --cpu-percent=80 --name='tasks-hpa'")      
       def dc = openshift.selector("dc", "tasks")
       while (dc.object().spec.replicas != dc.object().status.availableReplicas) {
         sleep 5
       }
      } 
     }
    }
   }
  }
    
  stage('Re-Deploy to  tasks-prod') {
   steps {
    script {
     openshift.withCluster() {
      openshift.withProject("tasks-prod") {
       openshift.selector("dc", "tasks").rollout().latest();
      }
     }
    }
   }
  }

  stage ('Check on tasks-prod') {
   steps {
    script {
     openshift.withCluster() {
      openshift.withProject("tasks-prod") {
       def dcObj = openshift.selector('dc', "tasks").object()
       def podSelector = openshift.selector('pod', [deployment: "tasks-${dcObj.status.latestVersion}"])
       podSelector.untilEach {
        return it.object().status.containerStatuses[0].ready
       }
      }
     }
    }
   }
  }
 }
}
